// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "sample": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/hirokisan/go-sandbox/go-api/design/api2
// --out=$(GOPATH)/src/github.com/hirokisan/go-sandbox/go-api/api2
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// A sample of wine (default view)
//
// Identifier: application/vnd.sample+json; view=default
type Sample struct {
	// API href for making requests on the sample
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// Unique sample ID
	ID int `form:"id" json:"id" yaml:"id" xml:"id"`
	// Name of wine
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the Sample media type instance.
func (mt *Sample) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DecodeSample decodes the Sample instance encoded in resp body.
func (c *Client) DecodeSample(resp *http.Response) (*Sample, error) {
	var decoded Sample
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
