// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "jwt": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/hirokisan/go-sandbox/go-api/design/jwt
// --out=$(GOPATH)/src/github.com/hirokisan/go-sandbox/go-api/jwt
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// BasicController is the controller interface for the Basic actions.
type BasicController interface {
	goa.Muxer
	Secure(*SecureBasicContext) error
	Unsecure(*UnsecureBasicContext) error
}

// MountBasicController "mounts" a Basic resource controller on the given service.
func MountBasicController(service *goa.Service, ctrl BasicController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSecureBasicContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Secure(rctx)
	}
	h = handleSecurity("basic_auth", h)
	service.Mux.Handle("GET", "/api/v1/basic", ctrl.MuxHandler("secure", h, nil))
	service.LogInfo("mount", "ctrl", "Basic", "action", "Secure", "route", "GET /api/v1/basic", "security", "basic_auth")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUnsecureBasicContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Unsecure(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/basic/unsecure", ctrl.MuxHandler("unsecure", h, nil))
	service.LogInfo("mount", "ctrl", "Basic", "action", "Unsecure", "route", "GET /api/v1/basic/unsecure")
}

// JWTController is the controller interface for the JWT actions.
type JWTController interface {
	goa.Muxer
	Secure(*SecureJWTContext) error
	Signin(*SigninJWTContext) error
	Unsecure(*UnsecureJWTContext) error
}

// MountJWTController "mounts" a JWT resource controller on the given service.
func MountJWTController(service *goa.Service, ctrl JWTController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSecureJWTContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Secure(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("GET", "/api/v1/jwt", ctrl.MuxHandler("secure", h, nil))
	service.LogInfo("mount", "ctrl", "JWT", "action", "Secure", "route", "GET /api/v1/jwt", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSigninJWTContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Signin(rctx)
	}
	h = handleSecurity("SigninBasicAuth", h)
	service.Mux.Handle("POST", "/api/v1/jwt/signin", ctrl.MuxHandler("signin", h, nil))
	service.LogInfo("mount", "ctrl", "JWT", "action", "Signin", "route", "POST /api/v1/jwt/signin", "security", "SigninBasicAuth")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUnsecureJWTContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Unsecure(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/jwt/unsecure", ctrl.MuxHandler("unsecure", h, nil))
	service.LogInfo("mount", "ctrl", "JWT", "action", "Unsecure", "route", "GET /api/v1/jwt/unsecure")
}
