// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "jwt": basic Resource Client
//
// Command:
// $ goagen
// --design=github.com/hirokisan/go-sandbox/go-api/design/jwt
// --out=$(GOPATH)/src/github.com/hirokisan/go-sandbox/go-api/jwt
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// SecureBasicPath computes a request path to the secure action of basic.
func SecureBasicPath() string {

	return fmt.Sprintf("/api/v1/basic")
}

// This action is secure with the basic_auth scheme
func (c *Client) SecureBasic(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSecureBasicRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSecureBasicRequest create the request corresponding to the secure action endpoint of the basic resource.
func (c *Client) NewSecureBasicRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BasicAuthSigner != nil {
		if err := c.BasicAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UnsecureBasicPath computes a request path to the unsecure action of basic.
func UnsecureBasicPath() string {

	return fmt.Sprintf("/api/v1/basic/unsecure")
}

// This action does not require auth
func (c *Client) UnsecureBasic(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUnsecureBasicRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUnsecureBasicRequest create the request corresponding to the unsecure action endpoint of the basic resource.
func (c *Client) NewUnsecureBasicRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
